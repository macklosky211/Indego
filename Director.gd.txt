extends Node
class_name Director


## Map_Area is a class that holds information about each zone, and most importantly, the zones position.
@export var Map_Areas : Array[Map_Area]

## Represents the average intensity of all the players.
var collective_intensity : float = 0.0

## This timer is what causes the main logical loop for this director.
@onready var Director_Timer : Timer = $Director_Timer

## This dictionary stores all the important information about every creature.
## Format: Creature {
## 		Current_Area : Map_Area,
##		Target_Player : Player
##		}
var Creature_Info : Dictionary[Dictionary]

## This dictionary stores all the important information about every creature.
## Format: Player {
## 		Current_Area : Map_Area
##		}
var Player_Info : Dictionary[Dictionary]

## The director itself is a FSM, the states are defined in /Director_States
var director_state : DirectorState:
	set(value):
		if director_state is Object and director_state.has_method("_exit"): director_state._exit()
		director_state = value
		if director_state is Object and director_state.has_method("_enter"): director_state._enter()

##--- Director States ---##

@onready var Low_Intensity : DirectorState


func _ready() -> void:
	if not multiplayer.is_server(): set_process(false); set_physics_process(false); return
	Director_Timer.timeout.connect(_main)
	
	for player as Player in get_node("/root/Main/Players").get_children():
		var player_information : Dictionary = { Current_Area: player.get_current_map_area() }
		Player_Info.set(player, player_information)
	
	for creature as Monster in get_node("/root/Main/Monsters"):
		var creature_information : Dictionary = { Current_Area: creature.get_current_map_area(), Target_Player: null }
		Creature_Info.set(creature, creature_information)
	 

func _main() -> void:
	if director_state is Object and director_state.has_method("_update"): director_state._update()